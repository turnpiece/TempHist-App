# ios/fastlane/Fastfile

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_KEY_ID"],
      issuer_id: ENV["APP_STORE_ISSUER_ID"],
      key_content: ENV["APP_STORE_PRIVATE_KEY"], # <-- this is the correct key
      is_key_content_base64: true
    )      

    match(
      api_key: api_key,
      type: "appstore",
      app_identifier: ENV["APP_IDENTIFIER"],
      readonly: false,
      git_branch: "master",
      generate_apple_certs: true
    )

    # Fallback: scan the installed profiles for one matching the app identifier
    profile_dir = File.join(ENV["HOME"], "Library/MobileDevice/Provisioning Profiles")
    profile_path = Dir["#{profile_dir}/*.mobileprovision"].find do |path|
      File.read(path).include?(ENV["APP_IDENTIFIER"])
    end

    UI.user_error!("Could not find provisioning profile for #{ENV["APP_IDENTIFIER"]}") if profile_path.nil?

    UI.message("Using provisioning profile at path: #{profile_path}")

    update_project_provisioning(
      xcodeproj: "Runner.xcodeproj",
      build_configuration: "Release",
      target_filter: "Runner",
      code_signing_identity: "Apple Distribution",
      profile: profile_path
    )

    build_app(
      scheme: "Runner",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          ENV["APP_IDENTIFIER"] => "match AppStore #{ENV["APP_IDENTIFIER"]}"
        },
        signingStyle: "manual",
        signingCertificate: "Apple Distribution",
        teamID: ENV["APP_STORE_TEAM_ID"]
      }
    )

    upload_to_testflight(
      api_key: api_key
    )
  end
end